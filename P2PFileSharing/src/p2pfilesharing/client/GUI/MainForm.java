
package p2pfilesharing.client.GUI;

import java.io.*;
import java.net.*;
import java.util.concurrent.*;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class MainForm extends javax.swing.JFrame {

    
    public MainForm() {
        initComponents();
    }

    private static final String SERVER_ADDRESS = "10.10.57.216"; // Địa chỉ server
    private static final int SERVER_PORT = 12345; // Cổng server
    private static int peerPort; // Cổng của peer
    private static ServerSocket peerListener;
    private static Socket serverSocket;
    private static PrintWriter serverOut;
    private static BufferedReader serverIn;
    private static ExecutorService fileTransferExecutor;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRefresh = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        btnName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        btnName.setText("Login");
        btnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNameActionPerformed(evt);
            }
        });

        fileTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Path", "String", "Port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fileTable);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnName)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRefresh)
                                .addGap(58, 58, 58)
                                .addComponent(btnUpload)
                                .addGap(62, 62, 62)
                                .addComponent(btnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(244, 244, 244))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnName))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        requestFileListFromServer();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            String path = chooser.getSelectedFile().getAbsolutePath();
            shareFileWithServer(path); 
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        int selectedRow = fileTable.getSelectedRow(); 

        if (selectedRow != -1) {
            String path = fileTable.getValueAt(selectedRow, 0).toString();
            connectToPeerAndDownloadFile(path);
        }
        
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNameActionPerformed

        try {
            // Sinh port ngẫu nhiên cho peer và kết nối tới CentralServer
            peerPort = 10000 + (int) (Math.random() * 5000); // Port ngẫu nhiên từ 10000 đến 14999
            peerListener = new ServerSocket(peerPort);
            fileTransferExecutor = Executors.newFixedThreadPool(10); // Hỗ trợ 10 kết nối đồng thời

            System.out.println("Peer đang lắng nghe trên port " + peerPort);

            // Kết nối tới CentralServer
            serverSocket = new Socket(SERVER_ADDRESS, SERVER_PORT);
            serverOut = new PrintWriter(serverSocket.getOutputStream(), true);
            serverIn = new BufferedReader(new InputStreamReader(serverSocket.getInputStream()));

            // Đăng ký với CentralServer
            serverOut.println(txtName.getText()); // Tên peer
            serverOut.println(peerPort); // Port ngẫu nhiên

            // Khởi chạy thread để nhận kết nối và gửi file
            new Thread(MainForm::listenForFileRequests).start();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnName;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpload;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTable fileTable;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    
    
    
        private static void listenForFileRequests() {
        try {
            while (true) {
                Socket peerSocket = peerListener.accept();
                System.out.println("Đã kết nối với " + peerSocket.getInetAddress().getHostAddress() + ":" + peerSocket.getPort());

                // Xử lý yêu cầu gửi file
                fileTransferExecutor.submit(() -> handleFileRequest(peerSocket));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void handleFileRequest(Socket peerSocket) {
        try (BufferedReader peerIn = new BufferedReader(new InputStreamReader(peerSocket.getInputStream()));
             BufferedOutputStream peerOut = new BufferedOutputStream(peerSocket.getOutputStream())) {

            // Nhận đường dẫn file từ peer yêu cầu
            String filePath = peerIn.readLine();
            File file = new File(filePath);

            if (file.exists()) {
                try (FileInputStream fileInputStream = new FileInputStream(file)) {

                    byte[] buffer = new byte[4096];
                    int bytesRead;

                    System.out.println("Đang gửi file " + filePath + " tới peer.");
                    while ((bytesRead = fileInputStream.read(buffer)) != -1) {
                        peerOut.write(buffer, 0, bytesRead);
                    }
                    peerOut.flush();
                    System.out.println("Gửi file hoàn tất!");

                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("File không tồn tại.");
                peerOut.write("FILE_NOT_FOUND".getBytes());
                peerOut.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void requestFileListFromServer() {
        try {
            serverOut.println("LIST_FILES");

            String line;
            
            DefaultTableModel model = (DefaultTableModel) fileTable.getModel();
            model.setRowCount(0);
            while ((line = serverIn.readLine()) != null) {
                if (line.equals("END")) break;
                System.out.println(line);
                String[] parts = line.split(" ");
                String path = parts[0];
                String[] ipport = parts[1].split(":");
                String ip = ipport[0];
                int port = Integer.parseInt(ipport[1]);
                model.addRow(new Object[]{path,ip,port}); 
           }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void shareFileWithServer(String filePath) {
        File sharedFile = new File(filePath);
        if (!sharedFile.exists()) {
            System.out.println("File không tồn tại.");
            return;
        }

        // Gửi đường dẫn file lên server
        serverOut.println("SHARE_FILE");
        serverOut.println(filePath);
        System.out.println("Đã chia sẻ file: " + sharedFile.getName());
    }

    private static void connectToPeerAndDownloadFile(String filePath) {
        try {
            serverOut.println("GET_PEER_FOR_FILE");
            serverOut.println(filePath);

            // Nhận thông tin peer từ server
            String peerInfo = serverIn.readLine();
            if (peerInfo.equals("FILE_NOT_FOUND")) {
                System.out.println("File không tồn tại trên các peer.");
                return;
            }

            String[] parts = peerInfo.split(" ");
            String[] peerAddressParts = parts[0].split(":");
            String peerIp = peerAddressParts[0];
            int peerPort = Integer.parseInt(peerAddressParts[1]);
            String filePathOnPeer = parts[1];

            int lastIndex = filePath.lastIndexOf("\\");  
            String fileName = filePath.substring(lastIndex + 1);
            
            // Kết nối tới peer để tải file
            try (Socket peerSocket = new Socket(peerIp, peerPort);
                 BufferedOutputStream fileOut = new BufferedOutputStream(new FileOutputStream("D:\\DUT\\received_" + fileName));
                 PrintWriter peerOut = new PrintWriter(peerSocket.getOutputStream(), true)) {

                // Gửi đường dẫn file tới peer
                peerOut.println(filePathOnPeer);

                try (BufferedInputStream peerIn = new BufferedInputStream(peerSocket.getInputStream())) {
                    System.out.println("Đang tải file từ " + peerIp + ":" + peerPort);

                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = peerIn.read(buffer)) != -1) {
                        fileOut.write(buffer, 0, bytesRead);
                    }
                    fileOut.flush();
                    System.out.println("Tải file hoàn tất!");

                } catch (IOException e) {
                    System.out.println("Không thể nhận file từ peer.");
                    e.printStackTrace();
                }

            } catch (IOException e) {
                System.out.println("Không thể kết nối đến peer.");
                e.printStackTrace();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


